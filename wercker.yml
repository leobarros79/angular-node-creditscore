box: node:current-slim
build:
  steps:
    - script:
        name: A step that executes `npm install` command
        code: npm install
        
    - internal/docker-push:
          entrypoint: node /pipeline/source/app.js
          #cmd: 0.0.0.0 8080
          working-dir: $WERCKER_ROOT
          tag: $WERCKER_GIT_COMMIT
          ports: "3000"
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
          repository: $DOCKER_REPO
          #registry: https://iad.ocir.io/v2

# pipeline to deploy application on kubernetes
deploy-to-oke:
  box:
        id: alpine
        cmd: /bin/sh
  steps:
    - bash-template
    
    - script:
        name: Prepare Kubernetes files
        code: |
          mkdir $WERCKER_OUTPUT_DIR/kubernetes
          mv kubernetes_*.yml $WERCKER_OUTPUT_DIR/kubernetes
    
    - kubectl:
        name: create namespace    
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f $WERCKER_ROOT/kubernetes-namespace.yml
 
    - script:
        name: wait to create namespace
        code: sleep 10
 
    - kubectl:
        name: create OCR secret
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: create secret docker-registry $OKE_IMAGESECRET --docker-server=iad.ocir.io --docker-username='$DOCKER_USERNAME' --docker-password='$DOCKER_PASSWORD' --docker-email='$DOCKER_EMAIL' --namespace=$WERCKER_APPLICATION_OWNER_NAME; echo 'secret step'
    
    - kubectl:
        name: create deplyoment
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f $WERCKER_ROOT/kubernetes/ --namespace=$WERCKER_APPLICATION_OWNER_NAME

    - script:
        name: "Visualise Ingress config"
        code: cat ingress.yml

    - kubectl:
        name: create Ingress configuration
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f $WERCKER_ROOT/ingress.yml --namespace=$WERCKER_APPLICATION_OWNER_NAME
        
    - kubectl:
        name: get LoadBalancer public IP address
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: get svc -o jsonpath='{.items[*].status.loadBalancer.ingress[*].ip}' --all-namespaces

# pipeline to execute functional test on application's microservice endpoint
# single curl invocation
rest-functional-test:
  steps:
    - script:
        name: Test Microservice
        code: |
              mkdir -p "/pipeline"
              node $WERCKER_ROOT/app.js &
              sleep 2
              CREDITSCORE_URL=http://localhost:3000/creditscore
              echo 'Microservice URL=' $CREDITSCORE_URL
              if curl -X POST -H "Content-Type: application/json" -X POST -d '{"firstname":"John","lastname":"Doe","dateofbirth":"01/01/2015","ssn":"111223333"}' $CREDITSCORE_URL | grep "firstname"
              then
                  # if the keyword is in the conent
                  echo "Test passed"
              else
                  echo "Test failed"
                  exit -1
              fi

# pipeline to execute functional test
# the test box prepared using headless chrome to execute ui test
ui-functional-test:
  box:
    id: peternagy/chrome-protractor-headless-test:node9.2-chrome62
  steps:
    - script:
        name: Run UI test
        code: | 
              nohup node $WERCKER_ROOT/app.js > creditscoreapp.log &
              echo 'Application URL to test: http://localhost:3000/creditscore'
              protractor $WERCKER_ROOT/test/protractor.conf.js
              exit_status=$?
              echo 'CreditScore app server log :::START'
              cat creditscoreapp.log
              echo 'CreditScore app server log :::END'
              if [ $exit_status -eq 0 ]; then
                echo "UI test passed"
              else
                echo "UI test failed"
                exit -1
              fi                
              
